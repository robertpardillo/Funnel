
from .factory import Factory
from ..collectionsObject.sketches import Sketches
from ..collectionsObject.hybridBodies import HybridBodies


def _in_work_object(func):
    def f(*args,**kwargs):
        self = args[0]
        self.parentsDict['Part'].cat_constructor.InWorkObject = self.cat_constructor
        obj = func(*args, **kwargs)
        return obj
    return f


class Body(object):
    """
        Possible Origins:

            Application                                                  Application
                Documents                                                   Documents
                    Part                                                        Part
                        Bodies                                                      HybridBodies
                            Body                                                        HybridBody
                                                                                            Bodies
                                                                                                Body

        Handles and contains the Body object and Body methods
        This class objects are generated by collection class that contains all the instance of this class

        Object variables:
            - parent                Bodies collection Object
            - parentsDict           OrderDict object, contains object's parents
            - cat_constructor       Catia's working variable, python COMObject
            - sketches_COLL         Sketches collection object
            - factory               Instance of generalObjects.factory.Factory, handles some types of Factories.
                                    See also Factory doc.
            - hybrid_bodies_COLL    Object of HybridBodies Collection. See also Collection doc. Handle HybridBody objects.
            - name                  Property, catia's working name
    """

    def __init__(self, parent, cat_constructor=None):
        """

        Initialized the object and sketches_COLL to handle the sketches creation.
        Initialized to Factory object.

        :param parent:
        :param cat_constructor:
        """
        self.parent = parent[parent[-1]]
        self.parentsDict = parent
        if not cat_constructor:
            self.cat_constructor = self.parent.cat_constructor.Add()
        else:
            self.cat_constructor = self.parent.cat_constructor.Item('PartBody')
        self.parentsDict[self.name] = self
        self.factory = Factory(self.parentsDict._copy())

        self.sketches_COLL = Sketches(self.parentsDict._copy())

    @property
    def name(self):
        """
        Return Object's Catia name
        :return: Object's name
        :rtype: str
        """
        return self.cat_constructor.Name

    @name.setter
    def name(self, value):
        self.cat_constructor.Name = value

    @_in_work_object
    def add_sketch(self, plane):
        """
        Add sketch to "plane"
        Example:
            - sketch = body.add_sketch('XY') # type(plane) = str

            - sketch = body.add_sketch(pad[0]) # type(plane) = COMObject GetReferenceFromName

        :param plane: string or reference
        :return: Created sketch
        :rtype: :class:`~Rice.generalObjects.sketch.Sketch`
        """
        try:
            if plane.lower() in ['xy','yx','zx','xz','zy','yz']:
                plane = self.parent.parent.originElements.get(plane)
        except:
            pass
        self.sketches_COLL.add(plane)

        return self.sketches_COLL.deque[-1]

    def geometrical_set(self):
        """
        Insert a new Geometrical Set

        Example:
            - geometricalSet = body.geometrical_set()
        :return:    Created Geometrical Set
        :rtype: :class:`~Rice.collectionsObject.hybridBodies.HybridBodies`
        """
        try:
            return self.hybrid_bodies_COLL

        except AttributeError:
            self.hybrid_bodies_COLL = HybridBodies(self.parentsDict._copy())
            self.hybrid_bodies_COLL.add()
            return self.hybrid_bodies_COLL.deque[-1]

    @_in_work_object
    def pad(self, sketch, limit):
        """
        Pad operation.

        :param sketch: Sketch Object
        :param limit: double or int
        :return:    Pad Object
        :rtype: :class:`~Rice.abstractObjects.shapes.pad.Pad`
        """

        shapefactory = self.factory.shape_factory()

        pad = shapefactory.AddNewPad(self.parentsDict, sketch, limit)
        return pad

    @_in_work_object
    def pocket(self, sketch, limit):
        """
        Pocket operation.

        :param sketch: Sketch Object
        :param limit: double or int
        :return:    Pocket Object
        :rtype: :class:`~Rice.abstractObjects.shapes.pocket.Pocket`
        """
        shapefactory = self.factory.shape_factory()
        pocket = shapefactory.AddNewPocket(self.parentsDict, sketch, limit)

        return pocket

    @_in_work_object
    def surf_circular_pattern(self, instances, total_angle, obj, rotation_axis):
        """
        Only implemented for Instances and total angle option
        :param instances: instances to repeat
        :type instances: int
        :param total_angle: total angle to repeat, degrees
        :type total_angle: float
        :param obj: object to repeat
        :type obj: :class:`~Rice.abstractObjects.shape.Shape`
        :param rotation_axis: axis
        :type rotation_axis: :class:`~Rice.abstractObjects.hybridShapes.line.Line`
        :return: Circular pattern
        :rtype: :class:`~Rice.abstractObjects.shapes.circPattern.CircPattern`
        """
        deltaTheta = total_angle/instances
        circPattern = self.factory.shape_factory().AddNewSurfacicCircPattern(self.parentsDict, rotation_axis, instances, deltaTheta, obj)
        return circPattern